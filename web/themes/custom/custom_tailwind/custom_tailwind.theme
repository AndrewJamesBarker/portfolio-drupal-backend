<?php
declare(strict_types=1);

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\contact\Entity\ContactForm;
use Drupal\Core\Url;

/**
 * @file
 * Theme functions for the Custom Tailwind theme.
 * Contains preprocess functions and other theme-specific logic.
 */

/**
 * Preprocesses the <html> tag.
 */
function custom_tailwind_preprocess_html(array &$variables): void {
  // You can add body or html-level classes here if needed.
}

/**
 * Preprocesses variables for the page template.
 */
function custom_tailwind_preprocess_page(array &$variables): void {
  // Useful for injecting page-specific classes or logic.
}

/**
 * Preprocesses node templates.
 */
function custom_tailwind_preprocess_node(array &$variables): void {
  // Common for adding template suggestions or modifying field display.
}

/**
 * Preprocesses the Preview Card custom block.
 * Passes field data into a component-friendly props array,
 * and handles rendering of a referenced CTA block into a slot.
 */
function custom_tailwind_preprocess_block__preview_card(array &$variables): void {
  $block = $variables['elements']['#block_content'];

  // Get the image URL from the referenced Media image.
  $image_entity = $block->get('field_image')->entity ?? NULL;
  $image_url = '';
  if ($image_entity) {
    $file_url_generator = \Drupal::service('file_url_generator');
    $image_url = $file_url_generator->generateAbsoluteString($image_entity->getFileUri());
  }

  // Set up props for the Preview Card SDC.
  $variables['card'] = [
    'title' => $block->get('field_title')->value ?? '',
    'description' => check_markup(
      $block->get('field_description')->value,
      $block->get('field_description')->format
    ),
    'image' => $image_url,
  ];

  // Render the referenced CTA Button block as a slot (if present).
  $cta_block = $block->get('field_cta_button')->referencedEntities()[0] ?? NULL;
  if ($cta_block) {
    $cta_view = \Drupal::entityTypeManager()
      ->getViewBuilder('block_content')
      ->view($cta_block);
    $variables['cta_slot'] = \Drupal::service('renderer')->renderRoot($cta_view);
  }
}

/**
 * Preprocesses the CTA Button custom block.
 * Converts field values into props for the CTA Button SDC.
 */
function custom_tailwind_preprocess_block__cta_button(array &$variables): void {
  $block = $variables['elements']['#block_content'];

  // Map each field into a prop expected by the component.
  $variables['cta'] = [
    'text' => $block->get('field_text')->value ?? '',
    'url' => $block->get('field_url')->getUrl()->toString(),
    'bg_colour' => $block->get('field_bg_colour')->value ?? 'bg-blue-600',
    'text_colour' => $block->get('field_text_colour')->value ?? 'text-white',
  ];
}

/**
 * Preprocesses the CTA Button Paragraph.
 * Converts field values into prop values for the CTA Button SDC.
 */
function custom_tailwind_preprocess_(array &$variables): void {}
